#!/usr/bin/env ruby

require 'dropbox_sdk'
require 'readline'

require_relative 'commands'
require_relative 'settings'
require_relative 'state'

APP_KEY = '5sufyfrvtro9zp7'
APP_SECRET = 'h99ihzv86jyypho'

def authorize
  flow = DropboxOAuth2FlowNoRedirect.new(APP_KEY, APP_SECRET)

  authorize_url = flow.start()

  # Have the user sign in and authorize this app
  puts '1. Go to: ' + authorize_url
  puts '2. Click "Allow" (you might have to log in first)'
  puts '3. Copy the authorization code'
  print 'Enter the authorization code here: '
  code = gets.strip

  # This will fail if the user gave us an invalid authorization code
  begin
    access_token, user_id = flow.finish(code)
    Settings[:access_token] = access_token
  rescue DropboxError
    puts 'Invalid authorization code.'
  end
end

def get_access_token
  until Settings.include?(:access_token)
    authorize()
  end
  Settings[:access_token]
end

client = DropboxClient.new(get_access_token())
info = client.account_info
puts "Logged in as #{info['display_name']} (#{info['email']})"

state = State.new

def prompt(info, state)
  "rubox #{info['email']}:#{state.pwd}> "
end

def file_complete(word)
  path = File.expand_path(word)
  prefix_length = path.length - word.length
  if word.end_with?('/') or word.empty?
    dir = path
    prefix_length += 1
  else
    dir = File.dirname(path)
  end
  Dir.entries(dir).map do |file|
    dir + '/' + file
  end.select do |file|
    file.start_with?(path)
  end.map do |file|
    if File.directory?(file)
      file << '/'
    else
      file << ' '
    end
    file[prefix_length, file.length]
  end
end

Readline.completion_proc = proc do |word|
  words = Readline.line_buffer.split
  index = words.length
  index += 1 if Readline.line_buffer.end_with?(' ')
  if index <= 1
    type = 'COMMAND'
  elsif Commands::NAMES.include?(words[0])
    cmd = Commands.const_get(words[0].upcase.to_sym)
    type = cmd.type_of_arg(index - 2)
  end

  case type
  when 'COMMAND'
    Commands::NAMES.select { |name| name.start_with? word }.map do |name|
      name + ' '
    end
  when 'LOCAL_FILE'
    file_complete(word)
  when 'REMOTE_FILE'
    begin
      state.file_complete(client, word)
    rescue DropboxError
      []
    end
  when 'REMOTE_DIR'
    begin
      state.dir_complete(client, word)
    rescue DropboxError
      []
    end
  else
    []
  end
end

begin
  Readline.completion_append_character = nil
rescue NotImplementedError
end

begin
  while line = Readline.readline(prompt(info, state), true)
    Commands.exec(line.chomp, client, state)
  end
  puts
rescue Interrupt
  puts
end

state.pwd = '/'
Settings.write
